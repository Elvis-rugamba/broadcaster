swagger: "2.0"
info:
  description: "This is a sample server Petstore server, For this sample, you can use the api key `special-key` to test the authorization filters."
  version: "1"
  title: "Broadcaster"
  contact:
    email: "elvisrugamba@gmail.com"
host: "localhost:3000"
basePath: "/api/v1"
tags:
- name: "auth"
  description: "Operations about user"
- name: "red-flag"
  description: "Operations about red-flag"
schemes:
- "http"
paths:
  /auth/signup:
    post:
      tags:
      - "auth"
      summary: "Create user account"
      description: "This endpoint creates a new user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "User created successfully"
          schema:
            $ref: "#/definitions/UserSuccessResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Email, Username or Phone number already used"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/signin:
    post:
      tags:
      - "auth"
      summary: "Login a user"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Login user object"
        required: true
        schema:
          $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: "User is successfully logged in"
          schema:
            $ref: "#/definitions/UserSuccessResponse"
        401:
          description: "Incorect email/password"
          schema:
            $ref: "#/definitions/ErrorResponse"
  /auth/logout:
    get:
      tags:
      - "auth"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /auth/{userId}:
    delete:
      tags:
      - "auth"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "userId"
        in: "path"
        description: "The id of a user that needs to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: "User deleted successfully"
          schema:
            $ref: "#/definitions/ApiResponse"
        400:
          description: "Invalid userId"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
          
  /red-flags:
    get:
      tags:
      - "red-flag"
      summary: "Fetch all red-flag records"
      description: "This endpoint fetches all red-flag records for individual"
      operationId: "getRedFlags"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RedFlagsResponse"
      security:
      - token: []
    post:
      tags:
      - "red-flag"
      summary: "Create a red-flag record"
      description: ""
      operationId: "createRedFlag"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "title"
        in: "formData"
        description: "Title of a red-flag"
        required: true
        type: "string"
      - name: "type"
        in: "formData"
        description: "Type of a red-flag"
        required: true
        type: "array"
        items:
          enum:
            - "red-flag"
            - "intervention"
          default: "red-flag"
      - name: "comment"
        in: "formData"
        description: "Type of a red-flag"
        required: true
        type: "string"
      - name: "location"
        in: "formData"
        description: "Location coords(lat, long) of a red-flag"
        required: true
        type: "string"
      - name: "images"
        in: "formData"
        description: "images to upload"
        required: false
        type: "file"
      - name: "videos"
        in: "formData"
        description: "videos to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "Created red-flag record"
          schema:
            $ref: "#/definitions/SuccessResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        #401:
          #description: "Email, Username or Phone number already used"
          #schema:
            #$ref: "#/definitions/ErrorResponse"
        415:
          description: "Unsupported file type"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
  /red-flags/{red-flag-id}:
    get:
      tags:
      - "red-flag"
      summary: "Fetch a specific red-flag records"
      description: "For valid response try integer IDs with value >= 1"
      operationId: "getRedFlagById"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "red-flag-id"
        in: "path"
        description: "ID of red-flag that needs to be fetched"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/RedFlagResponse"
        400:
          description: "Invalid red-flag ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Access denied other user's record"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
    patch:
      tags:
      - "red-flag"
      summary: "Update a red-flag record"
      description: ""
      operationId: "updateRedFlag"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "red-flag-id"
        in: "path"
        description: "ID of red-flag that needs to be updated"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      - name: "title"
        in: "formData"
        description: "Title of a red-flag"
        required: true
        type: "string"
      - name: "type"
        in: "formData"
        description: "Type of a red-flag"
        required: true
        type: "string"
        enum:
        - "red-flag"
        - "intervention"
        default: "red-flag"
      - name: "comment"
        in: "formData"
        description: "Type of a red-flag"
        required: true
        type: "string"
      - name: "location"
        in: "formData"
        description: "Location coords(lat, long) of a red-flag"
        required: true
        type: "string"
      - name: "images"
        in: "formData"
        description: "images to upload"
        required: false
        type: "file"
      - name: "videos"
        in: "formData"
        description: "videos to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "Updated red-flag record"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "Invalid red-flag ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
        405:
          description: "Invalid input"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Can not edit red-flag record because it is under-investigation, rejected or resolved"
          schema:
            $ref: "#/definitions/ErrorResponse"
        415:
          description: "Unsupported file type"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Access denied other user's record"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
    delete:
      tags:
      - "red-flag"
      summary: "Delete a red-flag record"
      description: ""
      operationId: "deleteRedFlag"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "red-flag-id"
        in: "path"
        description: "ID of red-flag that needs to be updated"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      responses:
        200:
          description: "Red-flag record has been deleted"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "Invalid red-flag ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Can not delete red-flag record because it is under-investigation, rejected or resolved"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Access denied other user's record"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
  /red-flags/{red-flag-id}/location:
    patch:
      tags:
      - "red-flag"
      summary: "Edit the location of a specific red-flag record"
      description: ""
      operationId: "editRedFlagLocation"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "red-flag-id"
        in: "path"
        description: "ID of red-flag that loacation needs to be updated"
        required: true
        type: "integer"
        minimum: 1.0
        format: "int64"
      - name: "body"
        in: "body"
        description: "Red-flag's location"
        required: true
        schema:
          type: "object"
          properties:
            location:
              type: "string"
      responses:
        200:
          description: "Updated red-flag record's location"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "Invalid red-flag ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Can not update red-flag record's location because it is under-investigation, rejected or resolved"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Access denied other user's record"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
  /red-flags/{red-flag-id}/comment:
    patch:
      tags:
      - "red-flag"
      summary: "Edit the comment of a specific red-flag record"
      description: ""
      operationId: "editRedFlagComment"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "red-flag-id"
        in: "path"
        description: "ID of red-flag that comment needs to be updated"
        required: true
        type: "integer"
        minimum: 1
      - name: "body"
        in: "body"
        description: "Red-flag's comment"
        required: true
        schema:
          type: "object"
          properties:
            comment:
              type: "string"
      responses:
        200:
          description: "Updated red-flag record's comment"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "Invalid red-flag ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
        401:
          description: "Can not update red-flag record's location because it is under-investigation, rejected or resolved"
          schema:
            $ref: "#/definitions/ErrorResponse"
        403:
          description: "Access denied other user's record"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
  /red-flags/{red-flag-id}/status:
    patch:
      tags:
      - "red-flag"
      summary: "Edit the status of a specific red-flag record"
      description: "Admin can edit the status of a specific red-flag record"
      operationId: "editRedFlagStatus"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        required: true
        type: "string"
      - name: "red-flag-id"
        in: "path"
        description: "ID of red-flag that status needs to be updated"
        required: true
        type: "integer"
        minimum: 1
      - name: "body"
        in: "body"
        description: "Red-flag's status"
        required: true
        schema:
          type: "object"
          properties:
            status:
              type: "string"
              enum:
              - "draft"
              - "under-investigation"
              - "rejected"
              - "resolved"
      responses:
        200:
          description: "Updated red-flag record's comment"
          schema:
            $ref: "#/definitions/SuccessResponse"
        400:
          description: "Invalid red-flag ID"
          schema:
            $ref: "#/definitions/ErrorResponse"
      security:
        - token: []
securityDefinitions:
  token:
    type: "apiKey"
    name: "token"
    in: "header"
definitions:
  User:
    type: "object"
    required:
    - "firstname"
    - "lastname"
    - "email"
    - "phoneNumber"
    - "username"
    - "password"
    - "password2"
    - "type"
    properties:
      firstname:
        type: "string"
      lastname:
        type: "string"
      email:
        type: "string"
      phoneNumber:
        type: "string"
      username:
        type: "string"
      password:
        type: "string"
      password2:
        type: "string"
      type:
        type: "string"
        description: "User Type"
    xml:
      name: "User"
  UserLogin:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "UserLogin"
  ApiResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      message:
        type: "string"
      data:
        xml:
          name: "Data"
          wrapped: true
        items:
          $ref: "#/definitions/Data"
  UserSuccessResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      message:
        type: "string"
      data:
        $ref: "#/definitions/Token"
  SuccessResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      data:
        type: "array"
        xml:
          wrapped: true
        items:
          $ref: "#/definitions/Data"
  RedFlagsResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      data:
        type: "array"
        xml:
          name: "Data"
          wrapped: true
        items:
          $ref: "#/definitions/RedFlagData"
  RedFlagResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      data:
        $ref: "#/definitions/RedFlagData"
  ErrorResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      error:
        type: "string"
  Token:
    type: "object"
    properties:
      token:
        type: "string"
    xml:
      name: "Category"
  Data:
    type: "object"
    properties:
      id:
        type: "integer"
      message:
        type: "string"
    xml:
      name: "Data"
  RedFlagData:
    type: "object"
    properties:
      id : 
        type: "integer"
      title : 
        type: "string"
      type : 
        type: "string"
      comment : 
        type: "string"
      location : 
        type: "string"
      images : 
        type: "array"
        xml:
          name: "Data"
          wrapped: true
        items:
          type: "string"
      videos : 
        type: "array"
        xml:
          name: "Data"
          wrapped: true
        items:
          type: "string"
      createdBy : 
        type: "string"
      createdOn : 
        type: "string"
        format: "date-time"
      status : 
        type: "string"
    xml:
      name: "RedFlagData"
#externalDocs:
  #description: "Find out more about Swagger"
  #url: "http://swagger.io"